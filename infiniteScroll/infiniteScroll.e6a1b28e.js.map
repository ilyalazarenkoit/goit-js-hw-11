{"mappings":"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","sources":["src/infiniteScroll/infiniteScroll.js","src/infiniteScroll/fetchData.js","src/infiniteScroll/renderMarkup.js"],"sourcesContent":["import { fetchData, page, searchParams } from \"./fetchData\"\nimport { renderMarkup } from \"./renderMarkup\"\nimport Notiflix from \"notiflix\"\nimport SimpleLightbox from \"simplelightbox\";\nimport \"simplelightbox/dist/simple-lightbox.min.css\"\n\nconst gallery = document.querySelector(\".gallery\")\nconst form = document.querySelector(\".search-form\")\n\nlet pages = 1;\nlet request;\n\nform.addEventListener(\"submit\", onSubmit)\nwindow.addEventListener(\"scroll\", () => {\nconst endOfPage = window.innerHeight + window.pageYOffset >= document.body.offsetHeight;\n  if (endOfPage) {\n    onLoadMore() ;\n  }\n});\n\n\nasync function onSubmit (event) {\n  request = event.currentTarget.searchQuery.value\n   event.preventDefault();\n   resetPage()\n   const response = await fetchData(request, pages)\n   console.log(response);\n   let fetching = await response.data.hits\n   console.log(fetching)\n    if(fetching.length === 0) {\n      Notiflix.Notify.failure(\"Sorry, there are no images matching your search query. Please try again.\"); \n    }\n    renderMarkup(fetching)\n    \n    if(fetching.length > 1) {\n    Notiflix.Notify.success(`Hooray! We found ${response.data.totalHits} images.`);\n  }\n  var lightbox = new SimpleLightbox('.gallery a', {\n    captionsData: 'alt',\n    captionDelay: 250,\n    })\n}\n\nfunction resetPage() {\n  pages = 1\n  gallery.innerHTML = \"\"\n}\n\nfunction newPage(pages) {\n  return ++pages\n}\n\nasync function onLoadMore () {\n  let newPages = newPage(pages)\n  const preparingForAdditionalFetch = await fetchData(request, newPages)\n  console.log(preparingForAdditionalFetch)\n  const additionalFetch = await preparingForAdditionalFetch.data.hits\n  if(additionalFetch.length < 40) {\n    Notiflix.Notify.info(\"We're sorry, but you've reached the end of search results.\");\n  }\n  console.log(additionalFetch)\n  renderMarkup(additionalFetch)\n  pages++ \n  var lightbox = new SimpleLightbox('.gallery a', {\n    captionsData: 'alt',\n    captionDelay: 250,\n    })\n  const { height: cardHeight } = document\n  .querySelector(\".gallery\")\n  .firstElementChild.getBoundingClientRect();\n\nwindow.scrollBy({\n  top: cardHeight * 2,\n  behavior: \"smooth\",\n});\n}\n\n\nexport {gallery}\n\n","import axios from \"axios\";\nimport Notiflix from 'notiflix';\nimport { pages } from \"./infiniteScroll\";\n\nconst BASE_URL = \"https://pixabay.com/api/\"\nconst USER_KEY = \"31138413-9963ca1c42c5ab8454e713dbb\"\nconst searchParams = new URLSearchParams({\n    image_type: \"photo\",\n    orientation: \"horizontal\",\n    safesearch: true,\n    per_page: 40,\n  });\n\nasync function fetchData(keyWord, page) {\ntry {\n    const response = await axios.get(`${BASE_URL}?key=${USER_KEY}&q=${keyWord}&${searchParams}&page=${page}`);\n    return response\n}catch(error) {\n    console.log(error)\n}\n}\n\n\nexport {fetchData, BASE_URL , USER_KEY, searchParams}","import { gallery } from \"./infiniteScroll\";\n\n\nfunction renderMarkup(array) {\n    markup = array.map(item => {\n    return `<a class=\"gallery__item\" href=${item.largeImageURL} ><div class=\"photo-card\">\n    <img class=\"image\"src=${item.webformatURL} alt=\"${item.tags}\" loading=\"lazy\" />\n    <div class=\"info\">\n      <p class=\"info-item\">\n        <b>Likes</b>\n        ${item.likes}\n      </p>\n      <p class=\"info-item\">\n        <b>Views</b>\n        ${item.views}\n      </p>\n      <p class=\"info-item\">\n        <b>Comments</b>\n        ${item.comments}\n      </p>\n      <p class=\"info-item\">\n        <b>Downloads</b>\n        ${item.downloads}\n      </p>\n    </div>\n    </div>\n    </a>`\n     }).join('')\n     gallery.innerHTML += markup;\n    }\n    \nexport {renderMarkup}"],"names":["$bpxeT","parcelRequire","$5b283844c51b507f$export$ca6dda5263526f75","$5b283844c51b507f$export$c8269609c9765a21","$5b283844c51b507f$export$dc77997033077144","URLSearchParams","image_type","orientation","safesearch","per_page","$5b283844c51b507f$export$8134c072fddab6a5","keyWord","page","$5b283844c51b507f$var$_fetchData","apply","this","arguments","$parcel$interopDefault","$2TvXO","mark","_callee","response","$dIxxU","default","get","concat","_ctx","sent","console","log","t0","$43910ce59beb4537$export$add40575555c273c","array","markup","map","item","largeImageURL","webformatURL","tags","likes","views","comments","downloads","join","$dc8eee0fd09efc18$export$b21c1b4271bdbe93","innerHTML","$dc8eee0fd09efc18$var$request","document","querySelector","$dc8eee0fd09efc18$var$form","$dc8eee0fd09efc18$var$pages","$dc8eee0fd09efc18$var$_onSubmit","event","fetching","currentTarget","searchQuery","value","preventDefault","$dc8eee0fd09efc18$var$resetPage","data","hits","length","$iU1Pc","Notify","failure","success","totalHits","$5IjG7","captionsData","captionDelay","$dc8eee0fd09efc18$var$newPage","pages1","$dc8eee0fd09efc18$var$_onLoadMore","newPages","preparingForAdditionalFetch","additionalFetch","ref","cardHeight","info","firstElementChild","getBoundingClientRect","height","window","scrollBy","top","behavior","addEventListener","innerHeight","pageYOffset","body","offsetHeight","$dc8eee0fd09efc18$var$onLoadMore"],"version":3,"file":"infiniteScroll.e6a1b28e.js.map"}